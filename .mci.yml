#######################################
#      libmongoc config for MCI       #
#######################################

#######################################
#            Options                  #
#######################################

stepback: true

#######################################
#            Functions                #
#######################################

functions:
    fetch_source:
        command: git.get_project
        params:
            directory: libmongoc

libmongoc_variables:
    ## Tests run on most buildvariants

    std_test_def: &std_tests
        - name: compile
        - name: make check

    msvc_test_def: &msvc_tests
        - name: compile msvc
        - name: make check msvc

    ## Architectures

    default_expansions_def: &default_expansions
        env_vars: CFLAGS=""
        mongodb_logpath: /data/log
        mongodb_args: "--fork --noprealloc --smallfiles --dbpath=/data/db --pidfilepath=/data/pid --auth"
        enable_ssl: yes

    windows_expansions_def: &windows_expansions
        env_vars: CFLAGS=""
        mongodb_logpath: C:/data
        mongodb_args: "--fork --noprealloc --smallfiles --dbpath=C:/data/db --pidfilepath=C:/data/pid --auth"
        enable_ssl: yes

    i386_expansions_def: &i386_expansions
        env_vars: CFLAGS="-m32 -march=i386"

    ubuntu_i386_expansions_def: &ubuntu_i386_expansions
        pre_compile: sudo apt-get install -f -y autoconf libtool gcc-multilib binutils-multiarch libsasl2-dev:i386 libsasl2-2:i386

    i686_expansions_def: &i686_expansions
        env_vars: CFLAGS="-m32 -march=i686"

    x86_64_expansions_def: &x86_64_expansions
        env_vars: CFLAGS="-m64 -march=x86-64"

    ## "Platforms" or whatever

    linux_expansions_def: &linux_expansions
        j_flag: -j$(grep -c ^processor /proc/cpuinfo)
        mongo_url: "https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-latest.tgz"

    osx_expansions_def: &osx_expansions
        j_flag: -j$(sysctl -n hw.logicalcpu)
        mongo_url: "https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-latest.tgz"

    solaris_expansions_def: &solaris_expansions
        j_flag: -j$(kstat cpu_info|grep core_id|sort -u|wc -l)
        mongo_url: "https://fastdl.mongodb.org/sunos5/mongodb-sunos5-x86_64-latest.tgz"

    msvc_expansions_def: &msvc_expansions:
        cmake: /cygdrive/c/cmake/bin/cmake
        generator: Visual Studio 12 2013
        msbuild: /cygdrive/c/Program Files (x86)/MSBuild/12.0/Bin/MSBuild.exe
        path: /cygdrive/c/mongo-c-driver/bin
        mongo_url: http://downloads.mongodb.com/win32/mongodb-win32-x86_64-enterprise-windows-64-latest.zip
        ext: .zip

    mingw_expansions_def: &mingw_expansions
        j_flag: -j$(grep -c ^processor /proc/cpuinfo)
        mongo_url: "https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-latest.zip"
        ext: ".zip"

#######################################
#              Pre Task               #
#######################################

pre:
    - command: shell.track

post:
    - command: shell.cleanup


#######################################
#               Tasks                 #
#######################################

tasks:
- name: compile
  commands:
      - command: git.get_project
        params:
            directory: libmongoc
      - command: git.apply_patch
        params:
            directory: libmongoc
      - command: shell.exec
        params:
            working_dir: libmongoc
            script: |
                set -o verbose
                set -o errexit
                export PATH=${path}:$PATH
                ${pre_compile}
                ${env_vars} ./autogen.sh --enable-ssl=${enable_ssl}
                make ${j_flag}
      - command: shell.exec
        params:
            working_dir: libmongoc
            script: |
                set -o verbose
                tar -czvf ../libmongoc.tar.gz .
      - command: s3.put
        params:
            aws_key: ${aws_key}
            aws_secret: ${aws_secret}
            remote_file: libmongoc/${build_variant}/${revision}/artifacts/${build_id}.tar.gz
            bucket: mciuploads
            local_file: libmongoc.tar.gz
            permissions: public-read
            content_type: ${content_type|application/x-gzip}

- name: make check
  depends_on:
      - name: compile
  commands:
      - command: shell.exec
        params:
            script: |
                set -o verbose
                rm -rf libmongoc
                mkdir libmongoc
                rm -rf /data/db
                mkdir -p /data/db
      - command: shell.exec
        params:
            working_dir: libmongoc
            script: |
                set -o verbose
                set -o errexit
                # MCI's S3 mechanism doesn't support symlinks
                curl http://s3.amazonaws.com/mciuploads/libmongoc/${build_variant}/${revision}/artifacts/${build_id}.tar.gz -o ${build_id}.tar.gz --silent
                tar -xzf ${build_id}.tar.gz
                curl -s ${mongo_url} --output mongo_enterprise.${ext|tgz}
                ${decompress} mongo_enterprise.${ext|tgz}
                cp mongodb*/bin/mongod${extension} ./mongod${extension}
                cp mongodb*/bin/mongo${extension} ./mongo${extension}
                chmod +x ./mongod${extension}
                chmod +x ./mongo${extension}
                if ! ./mongod${extension} ${mongodb_args} --logpath=${mongodb_logpath}
                then
                    cat ${mongodb_logpath}
                    exit 1
                fi
                tries=0
                until ./mongo${extension} --eval 'printjson(db.serverBuildInfo())'; do
                    sleep 2
                    ((tries=tries+1))
                    if ((tries > 15)); then
                        break
                    fi
                done
                ./mongo${extension} --eval "db.createUser({user: 'admin', pwd: 'pass', roles: [{role: 'root', db: 'admin'}]})" admin
                export MONGOC_TEST_USER=admin
                export MONGOC_TEST_PASSWORD=pass
                make check

- name: compile msvc
  commands:
      - command: git.get_project
        params:
            directory: libmongoc
      - command: git.apply_patch
        params:
            directory: libmongoc
      - command: shell.exec
        params:
            working_dir: libmongoc/src/libbson
            script: |
                set -o verbose
                set -o errexit
                export PATH=${path}:$PATH
                ${cmake} -G "${generator}" "-DCMAKE_INSTALL_PREFIX=C:/mongo-c-driver"
                ${msbuild} /m ALL_BUILD.vcxproj
                ${msbuild} /m INSTALL.vcxproj
      - command: shell.exec
        params:
            working_dir: libmongoc
            script: |
                set -o verbose
                set -o errexit
                export PATH=${path}:$PATH
                ${cmake} -G "${generator}" "-DCMAKE_INSTALL_PREFIX=C:/mongo-c-driver" "-DBSON_ROOT_DIR=C:\mongo-c-driver"
                ${msbuild} /m ALL_BUILD.vcxproj
                ${msbuild} /m INSTALL.vcxproj
      - command: shell.exec
        params:
            working_dir: libmongoc
            script: |
                set -o verbose
                tar -czvf ../libmongoc.tar.gz .
      - command: s3.put
        params:
            aws_key: ${aws_key}
            aws_secret: ${aws_secret}
            remote_file: libmongoc/${build_variant}/${revision}/artifacts/${build_id}.tar.gz
            bucket: mciuploads
            local_file: libmongoc.tar.gz
            permissions: public-read
            content_type: ${content_type|application/x-gzip}

- name: make check msvc
  depends_on:
      - name: compile msvc
  commands:
      - command: shell.exec
        params:
            script: |
                set -o verbose
                rm -rf libmongoc
                mkdir libmongoc
                rm -rf /data/db
                mkdir -p /data/db
      - command: shell.exec
        params:
            working_dir: libmongoc
            script: |
                set -o verbose
                set -o errexit
                # MCI's S3 mechanism doesn't support symlinks
                curl http://s3.amazonaws.com/mciuploads/libmongoc/${build_variant}/${revision}/artifacts/${build_id}.tar.gz -o ${build_id}.tar.gz --silent
                tar -xzf ${build_id}.tar.gz
                curl -s ${mongo_url} --output mongo_enterprise.${ext|tgz}
                ${decompress} mongo_enterprise.${ext|tgz}
                cp mongodb*/bin/mongod${extension} ./mongod${extension}
                cp mongodb*/bin/mongo${extension} ./mongo${extension}
                chmod +x ./mongod${extension}
                chmod +x ./mongo${extension}
                if ! ./mongod${extension} ${mongodb_args} --logpath=${mongodb_logpath}
                then
                    cat ${mongodb_logpath}
                    exit 1
                fi
                tries=0
                until ./mongo${extension} --eval 'printjson(db.serverBuildInfo())'; do
                    sleep 2
                    ((tries=tries+1))
                    if ((tries > 15)); then
                        break
                    fi
                done
                ./mongo${extension} --eval "db.createUser({user: 'admin', pwd: 'pass', roles: [{role: 'root', db: 'admin'}]})" admin
                export MONGOC_TEST_USER=admin
                export MONGOC_TEST_PASSWORD=pass
                make check

#######################################
#           Buildvariants             #
#######################################

buildvariants:

################ 32-bit ###############

#- name: rhel55-32
#  display_name: RHEL 5.5 32-bit
#  expansions:
#      <<: *default_expansions
#      <<: *linux_expansions
#  run_on:
#      - rhel55-32
#  tasks: *std_tests

#- name: windows-32
#  display_name: Windows 32-bit
#  expansions:
#      <<: *default_expansions
#      <<: *mingw_expansions
#      mongo_url: "https://fastdl.mongodb.org/win32/mongodb-win32-i386-latest.zip"
#  run_on:
#      - windows-32
#  tasks: *std_tests

########## i386 cross-compile #########

#- name: ubuntu-1204-i386
#  display_name: Ubuntu 12.04 i386
#  expansions:
#      <<: *default_expansions
#      <<: *i386_expansions
#      <<: *linux_expansions
#      <<: *ubuntu_i386_expansions
#      enable_ssl: no
#  run_on:
#      - ubuntu1204-test
#  tasks: *std_tests

#- name: ubuntu-1404-i386
#  display_name: Ubuntu 14.04 i386
#  expansions:
#      <<: *default_expansions
#      <<: *i386_expansions
#      <<: *linux_expansions
#      <<: *ubuntu_i386_expansions
#      enable_ssl: no
#  run_on:
#      - ubuntu1404-test
#  tasks: *std_tests

#- name: os-x-108-i386
#  display_name: OS X 10.8 i386
#  expansions:
#      <<: *default_expansions
#      <<: *osx_expansions
#      env_vars: CC="clang -m32 -march=i386"
#  run_on:
#      - osx-108
#  tasks: *std_tests

########## i686 cross-compile #########

#- name: ubuntu-1204-i686
#  display_name: Ubuntu 12.04 i686
#  expansions:
#      <<: *default_expansions
#      <<: *i686_expansions
#      <<: *linux_expansions
#      pre_compile: sudo apt-get install -f -y autoconf libtool
#      enable_ssl: no
#  run_on:
#      - ubuntu1204-test
#  tasks: *std_tests

#- name: ubuntu-1404-i686
#  display_name: Ubuntu 14.04 i686
#  expansions:
#      <<: *default_expansions
#      <<: *i686_expansions
#      <<: *linux_expansions
#      pre_compile: sudo apt-get install -f -y autoconf libtool
#      enable_ssl: no
#  run_on:
#      - ubuntu1404-test
#  tasks: *std_tests

#- name: os-x-108-i686
#  display_name: OS X 10.8 i686
#  expansions:
#      <<: *default_expansions
#      <<: *osx_expansions
#      env_vars: CC="clang -m32 -march=i686"
#  run_on:
#      - osx-108
#  tasks: *std_tests

############## x86_64 #################

- name: ubuntu-1204-64
  display_name: Ubuntu 12.04 64-bit
  expansions:
      <<: *default_expansions
      <<: *x86_64_expansions
      <<: *linux_expansions
      pre_compile: sudo apt-get install -f -y autoconf libtool
  run_on:
      - ubuntu1204-test
  tasks: *std_tests

- name: ubuntu-1404-64
  display_name: Ubuntu 14.04 64-bit
  expansions:
      <<: *default_expansions
      <<: *x86_64_expansions
      <<: *linux_expansions
  run_on:
      - ubuntu1404-test
  tasks: *std_tests

- name: os-x-108-64
  display_name: OS X 10.8 64-bit
  expansions:
      <<: *default_expansions
      <<: *osx_expansions
  run_on:
      - osx-108
  tasks: *std_tests

- name: solaris-64-bit
  display_name: Solaris 64-bit
  expansions:
      <<: *default_expansions
      <<: *x86_64_expansions
      <<: *solaris_expansions
      path: "/opt/mongodbtoolchain/bin/"
  run_on:
      - solaris
  tasks: *std_tests

- name: windows-64-vs2013
  display_name: Windows 64-bit CMake Visual Studio 2013
  expansions:
      <<: *windows_expansions
      <<: *msvc_expansions
  run_on:
      - windows-64-vs2013-compile
  tasks: *msvc_tests

#- name: windows-64-mingw64
#  display_name: Windows 64-bit MinGW-64
#  expansions:
#      <<: *default_expansions
#      # must change dos to unix line endings for some reason
#      pre_compile: sed -i 's/\r//' autogen.sh
#      path: "/cygdrive/c/mingw-w64/x86_64-4.9.1-posix-seh-rt_v3-rev1/mingw64/bin:/cygdrive/c/sasl/"
#  run_on:
#      - windows-64-vs2013-test
#  tasks: *std_tests
